#Question 1
library(tidyverse)

table_a <- tibble(
  SKU = c(102345, 104567, 108912, 109876, 112233),
  Fruit = c("Apple", "Orange", "Mango", "Blueberry", "Watermelon"),
  Color = c("Red", "Orange", "Yellow", "Blue", "Green"),
  Price = c(1.20, 1.40, 1.70, 3.50, 4.40),
  In_Stock = c("Yes", "Yes", "No", "Yes", "No")
)

table_b <- tibble(
  SKU = c(102345, 105432, 106789, 104567, 107654),
  Fruit = c("Apple", "Banana", "Grape", "Orange", "Pear"),
  Color = c("Red", "Yellow", "Purple", "Orange", "Green"),
  Sale_Price = c(1.00, 0.50, 2.00, 1.20, 1.10),
  Number_in_Stock = c(50, 120, 0, 75, 0)
)
#1a)Left Join
> left_join_table <- left_join(table_a, table_b, by = "SKU")
#1b)Right Join
> right_join_table <- right_join(table_a, table_b, by = "SKU")
#1c)Inner Join
> inner_join_table <- inner_join(table_a, table_b, by = "SKU")
#1d)Full Join
> full_join_table <- full_join(table_a, table_b, by = "SKU")
#1e)Semi Join
> semi_join_table <- semi_join(table_a, table_b, by = "SKU")
#1f)Anti Join
> anti_join_table <- anti_join(table_a, table_b, by = "SKU")

#Question 2 
#2a)Import Data
demographics <- read_csv("homework/Assignment4/demographics.csv")
full <- read_csv("homework/Assignment4/full.csv")
hospitals <- read_csv("homework/Assignment4/hospitals.csv")
patient_names <- read_csv("homework/Assignment4/patient_names.csv")
treatment_info <- read_csv("homework/Assignment4/treatment_info.csv")
#2b)
glimpse(demographics)
glimpse(full)
glimpse(hospitals)
glimpse(patient_names)
glimpse(treatment_info)

#Question 3
full_long <- pivot_longer(full, 
     cols = -c(patient_id, name),
     names_to = "property",
     values_to = "observation",
     values_transform = function(x) ifelse(is.na(x), NA, as.character(x))
  )
full_long %>%
     group_by(patient_id, name) %>%
     tally() %>%
     arrange(desc(n))

#Question 4
chr_cols <- c("gender", "race", "ethnicity", "condition", "treatment", 
               "department", "hospital", "patient_address", "patient_city", "patient_state")
chr_long <- full %>%
     select(patient_id, name, all_of(chr_cols)) %>%
     pivot_longer(
         cols = all_of(chr_cols),
         names_to = "property_chr",
         values_to = "value_chr"
     ) %>%
     group_by(patient_id, name) %>%
     mutate(row = row_number()) %>%
     ungroup()

num_cols <- c("age", "patient_zipcode")
 
num_long <- full %>%
     select(patient_id, name, all_of(num_cols)) %>%
     pivot_longer(
         cols = all_of(num_cols),
         names_to = "property_num",
         values_to = "value_num"
) %>%
group_by(patient_id, name) %>%
mutate(row = row_number()) %>%
ungroup()

date_cols <- c("admission_date", "release_date")

date_long <- full %>%
     select(patient_id, name, all_of(date_cols)) %>%
     pivot_longer(
         cols = all_of(date_cols),
         names_to = "property_date",
         values_to = "value_date"
) %>%
group_by(patient_id, name) %>%
mutate(row = row_number()) %>%
ungroup()

full_longlong <- chr_long %>%
     full_join(num_long, by = c("patient_id", "name", "row")) %>%
     full_join(date_long, by = c("patient_id", "name", "row"))
full_longlong %>%
     group_by(patient_id, name) %>%   # ← this is the grouping statement
     summarise(
         n_chr  = sum(!is.na(value_chr)),
         n_num  = sum(!is.na(value_num)),
         n_date = sum(!is.na(value_date)),
         .groups = "drop" 

#Question 5 
patients_with_hospital <- patient_names %>%
     left_join(hospitals, by = "hospital_id") %>%
     select(name, hospital_name)
head(patients_with_hospital)

#Question 6
patient_demographics_treatment <- patient_names %>%
     left_join(demographics, by = "patient_id") %>%       # join on patient_id
     left_join(treatment_info, by = "condition_id") %>%   # join on condition_id
     select(patient_id, name, age, gender, condition, treatment)
 head(patient_demographics_treatment)

#Question 7 
#Loading code
# Load UFO sightings data from a GitHub CSV
df <- read_csv("https://raw.githubusercontent.com/Vincent-Toups/bios512/refs/heads/main/nuforc_workshop/nuforc_sightings.csv")

# Read column names
names(df)

# Count the occurrences of each unique 'shape' value
unique_vals <- df$shape %>% table()

# Sort the counts of shapes in descending order and get the names
unique_vals %>% sort(decreasing = T) %>% names()

# Store column names in a vector
column_names <- names(df)

# Total number of rows in the dataset
n_total <- nrow(df)

# Loop over each column to get basic summary stats
for(col in column_names) {
  values <- df[[col]];        # Extract column
  n_na <- sum(is.na(values))  # Count number of NA values
    
  unique_vals <- values %>% table() %>% sort(decreasing = T)  # Count unique values and sort them by frequency
  n_unique <- length(unique_vals)
    
  cat(sprintf("%s:\n", col))  # Print column name
  cat(sprintf("\tnumber of NA values %d (%0.2f %%)\n", n_na, 100*n_na/n_total)) # Print number and percent of NA values
  if(n_unique < 150) cat(sprintf("\t\t%s\n", names(unique_vals) %>% paste(collapse=", "))) # If column has fewer than 150 unique values, print them all
  cat(sprintf("\tnumber of unique values %d (%0.2f %%)\n", length(unique_vals), # Print number and percent of unique values
    100*length(unique_vals)/n_total))
}

# Count number of reports per state and sort ascending
df %>% group_by(state) %>% tally() %>% arrange(n)

# Extract the 'occurred' column as a vector
df %>% pull(occurred)

# Helper function: nth(n) returns a function that extracts the nth element of a vector
nth <- function(n) function(a) a[n]

# Custom function to parse date strings by splitting on - / space : characters
parse_date <- function(s){
                          space_split <- s %>% str_split("[-/ :]")
                          tibble(d1 = Map(nth(1), space_split) %>% as.character(),
                                      d2 = Map(nth(2), space_split) %>% as.character(),
                                      d3 = Map(nth(3), space_split) %>% as.character(),
                                      d4 = Map(nth(4), space_split) %>% as.character(),
                                      d5 = Map(nth(5), space_split) %>% as.character())
                          }

# Apply the parsing function to the 'occurred' column
date_stuff <- parse_date(df %>% pull(occurred))
head(date_stuff, 10)

# Histogram of the second component of the split date (likely month)
ggplot (date_stuff, aes(d2))+ geom_bar() + labs(x = "Month", y = "Count")

# Install and load the skimr package for a nicer summary
library(skimr)

# Quick summary of the dataset
skim_output <- skimr::skim(df)

# Count occurrences for categorical columns
df %>% count(country, sort = TRUE)
df %>% count(state, sort = TRUE)
df %>% count(shape, sort = TRUE)

# Convert 'occurred' and 'reported' to proper date-time format using lubridate
df <- df %>%
  mutate(
  occurred = lubridate::mdy_hm(occurred, quiet = TRUE),
  reported = lubridate::mdy_hm(reported, quiet = TRUE)
  )

# Plot UFO sightings per year
df %>%
  filter(!is.na(occurred)) %>%
  count(year = lubridate::year(occurred)) %>%
  ggplot(aes(year, n)) +
  geom_line() +
    labs(title = "UFO Sightings per Year", x = "Year", y = "Number of Reports")

#Answering Question 7
#definition of low number of unique values relative to the df:≤150
clean_df <- df %>%
  mutate(shape = str_to_lower(shape) %>%        # lowercase
           str_trim() %>%                       # trim whitespace
           na_if("") %>%                        # empty string to NA
           # convert "unknown" to NA as well
           if_else(. %in% c("unknown", "na"), NA_character_, .)
         )
clean_df <- clean_df %>%
  mutate(
    explanation = explanation %>%
      tolower() %>%
      str_trim() %>%
      str_replace_all("[[:punct:]]", "")  # remove punctuation, including '?'
  ) %>%
  mutate(
    explanation = case_when(
      explanation %in% c("", "unknown", "na", "unexplained") ~ NA_character_,
      
      # Combine similar terms (examples)
      explanation %in% c("aircraft") ~ "aircraft",
      explanation %in% c("balloon", "balloons") ~ "balloon",
      explanation %in% c("chineselantern", "chineselanterns") ~ "chinese lantern",
      explanation %in% c("bird", "birds") ~ "bird",
      explanation %in% c("drone", "drones") ~ "drone",
      explanation %in% c("firework", "fireworks") ~ "fireworks",
      explanation %in% c("flare", "flares") ~ "flare",
      explanation %in% c("hoax") ~ "hoax",
      explanation %in% c("iss") ~ "iss",
      explanation %in% c("meteor") ~ "meteor",
      explanation %in% c("planetstar", "planet/star") ~ "planet/star",
      explanation %in% c("rocket") ~ "rocket",
      explanation %in% c("satellite", "satellites") ~ "satellite",
      explanation %in% c("searchlight") ~ "searchlight",
      explanation %in% c("spacejunk", "space junk") ~ "space junk",
      explanation %in% c("starlink", "starlinkracetrack", "starlink racetrack") ~ "starlink",
      
      explanation %in% c("aurora", "auroraborealis") ~ "aurora borealis",
      explanation %in% c("boat", "boats") ~ "boats",
      explanation %in% c("insect", "insectweb", "insects") ~ "insects",
      
      explanation %in% c("smoke", "smokering", "smoke ring") ~ "smoke",
      
      TRUE ~ explanation
    )
  )
low_uniquetable <- clean_df %>%
     select(shape, explanation, has_image, reported) %>%   
     arrange(shape, explanation, has_image) 

#Question 8
clean_df <- clean_df %>%
  mutate(country = str_to_lower(country))
ufos_us <- clean_df %>%
  filter(country == "usa")
ufos_us_clean <- ufos_us %>%
     filter(!state %in% c("0", "Corrientes", "ENG", "England", "GU", "PR", "VI", "UM", "-")) %>%
     mutate(state = case_when(
         state == "Ca" ~ "CA",
         state == "Fl" ~ "FL",
         state == "Montana" ~ "MT",
         state == "NB" ~ "NE",
         state == "New York" ~ "NY",
         state == "Ohio" ~ "OH",
         state == "West Virginia" ~ "WV",
         state == "Wisconsin" ~ "WI",
         TRUE ~ state
     ))
state_counts <- ufos_us_clean %>%
     group_by(state) %>%
     tally()
ggplot(state_counts, aes(x = state, y = n, fill = state)) +
     geom_bar(stat = "identity", position = "dodge") +
     labs(x = "State", y = "Number of Sightings", title = "Number of UFO Sightings by State") +
     theme(
         axis.text.x = element_text(angle = 90, hjust = 1, size = 8),  # vertical and smaller font
         legend.position = "none"
     ) +
     scale_x_discrete(guide = guide_axis(n.dodge = 1))
